
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ABSTRACT ADMIRATION AND AS ASYNC BREAK CASE CATCH CLASS COMA CONST CONSTRUCTOR CONTINUE DEFAULT DIVIDE DO DOT DOUBLEPOINTS ELSE ENUM EXTENDS EXTERNAL FACTORY FALSE FINAL FOR FUN FUNCTION GET HIDE IF IGUAL IMPORT IN INFIX INIT INTERFACE IS LIBRARY LIST LISTOF LKEY LPAREN MAYOR MINOR MINUS MUTABLELIST MUTABLELISTOF NEQUAL NEW NOT NULL OPEN OPERATOR OR OUT OVERRIDE PAIR PART PLUS PRINTLN READLINE RETURN RKEY RPAREN SET SETPARAM STATIC STRING SUPER SWITCH SYNC TFLOAT THIS THROW TIMES TINT TRUE TRY TYPEALIAS TYPEOF VAL VAR VARIABLE VFLOAT VINT VOID WHEN WHILE WITHdocumento : implementa_funcion \n    | instruccionescuerpoF : asignacion\n  | impresion\n  | asignadores\n  | comparators\n  | list\n  | mutableList\n  | pair\n  | inData\n  | if\n  | for\n  | while\n  | when \n  asignacion : designacion VARIABLE DOUBLEPOINTS tipo IGUAL valordesignacion : VAL \n        | VAR\n    tipo : TINT\n        | TFLOAT\n        | STRING\n    diamondType : MINOR tipo MAYOR listAsignacion : designacion  VARIABLE DOUBLEPOINTS LIST diamondType\n    | designacion VARIABLE\n    listOf : LISTOF LPAREN elementos RPAREN elementos : elementos COMA valor\n    | valor\n    valor : VINT\n    | VFLOAT\n    | STRING\n    list : listAsignacion IGUAL listOf\n    add : operado PLUS operado\n  subtract : operado MINUS operado\n  multiply : operado TIMES operado\n  divide : operado DIVIDE operado\n  operado : add\n    | subtract\n    | multiply\n    | divide\n    | dato\n     mutListAsignacion : designacion VARIABLE DOUBLEPOINTS MUTABLELIST diamondType\n    | designacion VARIABLE\n    mutableListOf : MUTABLELISTOF LPAREN elementos RPARENmutableList : mutListAsignacion IGUAL mutableListOf\n    pairAsignation : designacion LPAREN VARIABLE COMA VARIABLE RPARENpairBody : PAIR LPAREN valor COMA valor RPARENpair : pairAsignation IGUAL pairBody\n    inData : designacion VARIABLE IGUAL READLINE LPAREN RPARENcompareType : dato IGUAL IGUAL dato\n    compareNotEqual : dato NOT IGUAL dato\n    comparators : compareType\n    | compareGreaterthan\n    | compareSmallerthan\n    | compareNotEqual\n    compareGreaterthan : dato MAYOR dato\n  compareSmallerthan : dato MINOR dato\n  impresion : PRINTLN LPAREN datoretornado RPARENdatoretornado : operado\n    | booly\n     condicion : booly\n    booly : comparators\n    | logic\n    | TRUE\n    | FALSElogic : booly logicoperador booly\n    | NOT booly\n    logicoperador : AND\n    | ORif : IF LPAREN condicion RPAREN LKEY instrucciones RKEY\n    | IF LPAREN condicion RPAREN LKEY instrucciones RKEY else\n    | IF LPAREN condicion RPAREN LKEY instrucciones RKEY elseif else\n    elseif : ELSE IF LPAREN condicion RPAREN LKEY instrucciones RKEYelse : ELSE LKEY instrucciones RKEY condicionFor : condicionRango\n    | condicionBloque\n    condicionRango :  VARIABLE IN VINT DOT DOT VINT condicionBloque : VARIABLE IN LISTOFfor : FOR LPAREN condicionFor RPAREN LKEY instrucciones RKEYwhile : WHILE LPAREN condicion RPAREN LKEY instrucciones RKEYwhen : WHEN LPAREN VARIABLE RPAREN LKEY instrucciones RKEYimplementa_funcion : FUN VARIABLE LPAREN listaparametros RPAREN DOUBLEPOINTS tipo LKEY instrucciones retorno RKEY\n    | FUN VARIABLE LPAREN RPAREN DOUBLEPOINTS tipo LKEY instrucciones retorno RKEY\n    | FUN VARIABLE LPAREN RPAREN DOUBLEPOINTS VOID LKEY instrucciones RKEY\n    | FUN VARIABLE LPAREN listaparametros RPAREN DOUBLEPOINTS VOID LKEY instrucciones RKEYlistaparametros : parametro\n    | parametro COMA listaparametrosparametro : VARIABLE DOUBLEPOINTS tiporetorno : RETURN asignadoinstrucciones : cuerpoF\n      | cuerpoF instruccionesasignadores : asigna\n    | plusasigna\n    | minasigna\n    | multasigna\n    | divasignaasigna : VARIABLE IGUAL asignadoplusasigna : VARIABLE PLUS IGUAL asignadominasigna : VARIABLE MINUS IGUAL asignadomultasigna : VARIABLE TIMES IGUAL asignadodivasigna : VARIABLE DIVIDE IGUAL asignadoasignado : comparators\n| operadodato : valor\n    | VARIABLE\n    '
    
_lr_action_items = {'FUN':([0,],[4,]),'PRINTLN':([0,6,7,8,9,10,11,12,13,14,15,16,17,18,20,22,23,24,25,26,27,28,29,30,41,42,43,66,67,68,69,70,71,72,73,74,90,92,94,105,106,116,117,118,119,128,141,142,147,148,149,150,151,163,164,167,168,174,176,178,180,189,190,194,195,197,198,199,200,203,204,213,215,224,227,],[21,21,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-102,-90,-91,-92,-93,-94,-50,-51,-52,-53,-27,-28,-29,-103,-95,-100,-101,-35,-36,-37,-38,-39,-30,-43,-46,-54,-55,-96,-97,-98,-99,-56,-48,-49,-31,-39,-32,-33,-34,21,21,21,21,-15,-47,-24,-42,21,21,-68,-77,-78,-79,21,21,-45,-69,-70,21,-72,21,]),'IF':([0,6,7,8,9,10,11,12,13,14,15,16,17,18,20,22,23,24,25,26,27,28,29,30,41,42,43,66,67,68,69,70,71,72,73,74,90,92,94,105,106,116,117,118,119,128,141,142,147,148,149,150,151,163,164,167,168,174,176,178,180,189,190,194,195,197,198,199,200,203,204,206,213,215,224,227,],[34,34,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-102,-90,-91,-92,-93,-94,-50,-51,-52,-53,-27,-28,-29,-103,-95,-100,-101,-35,-36,-37,-38,-39,-30,-43,-46,-54,-55,-96,-97,-98,-99,-56,-48,-49,-31,-39,-32,-33,-34,34,34,34,34,-15,-47,-24,-42,34,34,-68,-77,-78,-79,34,34,-45,-69,216,-70,34,-72,34,]),'FOR':([0,6,7,8,9,10,11,12,13,14,15,16,17,18,20,22,23,24,25,26,27,28,29,30,41,42,43,66,67,68,69,70,71,72,73,74,90,92,94,105,106,116,117,118,119,128,141,142,147,148,149,150,151,163,164,167,168,174,176,178,180,189,190,194,195,197,198,199,200,203,204,213,215,224,227,],[35,35,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-102,-90,-91,-92,-93,-94,-50,-51,-52,-53,-27,-28,-29,-103,-95,-100,-101,-35,-36,-37,-38,-39,-30,-43,-46,-54,-55,-96,-97,-98,-99,-56,-48,-49,-31,-39,-32,-33,-34,35,35,35,35,-15,-47,-24,-42,35,35,-68,-77,-78,-79,35,35,-45,-69,-70,35,-72,35,]),'WHILE':([0,6,7,8,9,10,11,12,13,14,15,16,17,18,20,22,23,24,25,26,27,28,29,30,41,42,43,66,67,68,69,70,71,72,73,74,90,92,94,105,106,116,117,118,119,128,141,142,147,148,149,150,151,163,164,167,168,174,176,178,180,189,190,194,195,197,198,199,200,203,204,213,215,224,227,],[36,36,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-102,-90,-91,-92,-93,-94,-50,-51,-52,-53,-27,-28,-29,-103,-95,-100,-101,-35,-36,-37,-38,-39,-30,-43,-46,-54,-55,-96,-97,-98,-99,-56,-48,-49,-31,-39,-32,-33,-34,36,36,36,36,-15,-47,-24,-42,36,36,-68,-77,-78,-79,36,36,-45,-69,-70,36,-72,36,]),'WHEN':([0,6,7,8,9,10,11,12,13,14,15,16,17,18,20,22,23,24,25,26,27,28,29,30,41,42,43,66,67,68,69,70,71,72,73,74,90,92,94,105,106,116,117,118,119,128,141,142,147,148,149,150,151,163,164,167,168,174,176,178,180,189,190,194,195,197,198,199,200,203,204,213,215,224,227,],[37,37,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-102,-90,-91,-92,-93,-94,-50,-51,-52,-53,-27,-28,-29,-103,-95,-100,-101,-35,-36,-37,-38,-39,-30,-43,-46,-54,-55,-96,-97,-98,-99,-56,-48,-49,-31,-39,-32,-33,-34,37,37,37,37,-15,-47,-24,-42,37,37,-68,-77,-78,-79,37,37,-45,-69,-70,37,-72,37,]),'VAL':([0,6,7,8,9,10,11,12,13,14,15,16,17,18,20,22,23,24,25,26,27,28,29,30,41,42,43,66,67,68,69,70,71,72,73,74,90,92,94,105,106,116,117,118,119,128,141,142,147,148,149,150,151,163,164,167,168,174,176,178,180,189,190,194,195,197,198,199,200,203,204,213,215,224,227,],[38,38,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-102,-90,-91,-92,-93,-94,-50,-51,-52,-53,-27,-28,-29,-103,-95,-100,-101,-35,-36,-37,-38,-39,-30,-43,-46,-54,-55,-96,-97,-98,-99,-56,-48,-49,-31,-39,-32,-33,-34,38,38,38,38,-15,-47,-24,-42,38,38,-68,-77,-78,-79,38,38,-45,-69,-70,38,-72,38,]),'VAR':([0,6,7,8,9,10,11,12,13,14,15,16,17,18,20,22,23,24,25,26,27,28,29,30,41,42,43,66,67,68,69,70,71,72,73,74,90,92,94,105,106,116,117,118,119,128,141,142,147,148,149,150,151,163,164,167,168,174,176,178,180,189,190,194,195,197,198,199,200,203,204,213,215,224,227,],[39,39,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-102,-90,-91,-92,-93,-94,-50,-51,-52,-53,-27,-28,-29,-103,-95,-100,-101,-35,-36,-37,-38,-39,-30,-43,-46,-54,-55,-96,-97,-98,-99,-56,-48,-49,-31,-39,-32,-33,-34,39,39,39,39,-15,-47,-24,-42,39,39,-68,-77,-78,-79,39,39,-45,-69,-70,39,-72,39,]),'VARIABLE':([0,4,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,22,23,24,25,26,27,28,29,30,38,39,41,42,43,45,52,53,57,58,59,60,62,63,65,66,67,68,69,70,71,72,73,74,75,76,77,78,89,90,92,94,104,105,106,107,112,113,114,115,116,117,118,119,127,128,129,130,131,141,142,146,147,148,149,150,151,163,164,167,168,174,176,178,180,189,190,194,195,197,198,199,200,203,204,211,213,215,222,224,227,],[5,44,5,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,51,-102,-90,-91,-92,-93,-94,-50,-51,-52,-53,-16,-17,-27,-28,-29,66,81,66,66,101,66,103,66,66,108,-103,-95,-100,-101,-35,-36,-37,-38,-39,66,66,66,66,66,-30,-43,-46,66,-54,-55,66,66,66,66,66,-96,-97,-98,-99,157,-56,66,-66,-67,-48,-49,108,-31,-39,-32,-33,-34,5,5,5,5,-15,-47,-24,-42,5,5,-68,-77,-78,-79,5,5,-45,-69,66,-70,5,66,-72,5,]),'VINT':([0,6,7,8,9,10,11,12,13,14,15,16,17,18,20,22,23,24,25,26,27,28,29,30,41,42,43,45,53,57,59,62,63,66,67,68,69,70,71,72,73,74,75,76,77,78,89,90,92,94,104,105,106,107,112,113,114,115,116,117,118,119,128,129,130,131,133,134,135,138,141,142,147,148,149,150,151,152,163,164,167,168,174,176,178,179,180,181,189,190,194,195,196,197,198,199,200,203,204,211,213,215,222,224,227,],[41,41,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-102,-90,-91,-92,-93,-94,-50,-51,-52,-53,-27,-28,-29,41,41,41,41,41,41,-103,-95,-100,-101,-35,-36,-37,-38,-39,41,41,41,41,41,-30,-43,-46,41,-54,-55,41,41,41,41,41,-96,-97,-98,-99,-56,41,-66,-67,41,41,41,165,-48,-49,-31,-39,-32,-33,-34,41,41,41,41,41,-15,-47,-24,41,-42,41,41,41,-68,-77,207,-78,-79,41,41,-45,-69,41,-70,41,41,-72,41,]),'VFLOAT':([0,6,7,8,9,10,11,12,13,14,15,16,17,18,20,22,23,24,25,26,27,28,29,30,41,42,43,45,53,57,59,62,63,66,67,68,69,70,71,72,73,74,75,76,77,78,89,90,92,94,104,105,106,107,112,113,114,115,116,117,118,119,128,129,130,131,133,134,135,141,142,147,148,149,150,151,152,163,164,167,168,174,176,178,179,180,181,189,190,194,195,197,198,199,200,203,204,211,213,215,222,224,227,],[42,42,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-102,-90,-91,-92,-93,-94,-50,-51,-52,-53,-27,-28,-29,42,42,42,42,42,42,-103,-95,-100,-101,-35,-36,-37,-38,-39,42,42,42,42,42,-30,-43,-46,42,-54,-55,42,42,42,42,42,-96,-97,-98,-99,-56,42,-66,-67,42,42,42,-48,-49,-31,-39,-32,-33,-34,42,42,42,42,42,-15,-47,-24,42,-42,42,42,42,-68,-77,-78,-79,42,42,-45,-69,42,-70,42,42,-72,42,]),'STRING':([0,6,7,8,9,10,11,12,13,14,15,16,17,18,20,22,23,24,25,26,27,28,29,30,41,42,43,45,53,57,59,62,63,66,67,68,69,70,71,72,73,74,75,76,77,78,79,89,90,92,94,104,105,106,107,112,113,114,115,116,117,118,119,128,129,130,131,133,134,135,141,142,143,145,147,148,149,150,151,152,154,163,164,167,168,170,174,176,178,179,180,181,189,190,194,195,197,198,199,200,203,204,211,213,215,222,224,227,],[43,43,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-102,-90,-91,-92,-93,-94,-50,-51,-52,-53,-27,-28,-29,43,43,43,43,43,43,-103,-95,-100,-101,-35,-36,-37,-38,-39,43,43,43,43,125,43,-30,-43,-46,43,-54,-55,43,43,43,43,43,-96,-97,-98,-99,-56,43,-66,-67,43,43,43,-48,-49,125,125,-31,-39,-32,-33,-34,43,125,43,43,43,43,125,-15,-47,-24,43,-42,43,43,43,-68,-77,-78,-79,43,43,-45,-69,43,-70,43,43,-72,43,]),'$end':([1,2,3,6,7,8,9,10,11,12,13,14,15,16,17,18,20,22,23,24,25,26,27,28,29,30,41,42,43,50,66,67,68,69,70,71,72,73,74,90,92,94,105,106,116,117,118,119,128,141,142,147,148,149,150,151,174,176,178,180,194,195,197,198,203,204,212,213,218,219,223,224,],[0,-1,-2,-88,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-102,-90,-91,-92,-93,-94,-50,-51,-52,-53,-27,-28,-29,-89,-103,-95,-100,-101,-35,-36,-37,-38,-39,-30,-43,-46,-54,-55,-96,-97,-98,-99,-56,-48,-49,-31,-39,-32,-33,-34,-15,-47,-24,-42,-68,-77,-78,-79,-45,-69,-82,-70,-83,-81,-80,-72,]),'IGUAL':([5,20,31,32,33,40,41,42,43,46,47,48,49,51,61,64,66,74,120,123,124,125,153,155,177,191,],[45,-102,54,55,56,61,-27,-28,-29,75,76,77,78,80,104,107,-103,61,152,-18,-19,-20,-22,-40,-44,-21,]),'PLUS':([5,20,41,42,43,66,69,70,71,72,73,74,83,147,148,149,150,151,],[46,-102,-27,-28,-29,-103,112,-35,-36,-37,-38,-39,112,112,-39,112,112,112,]),'MINUS':([5,20,41,42,43,66,69,70,71,72,73,74,83,147,148,149,150,151,],[47,-102,-27,-28,-29,-103,113,-35,-36,-37,-38,-39,113,113,-39,113,113,113,]),'TIMES':([5,20,41,42,43,66,69,70,71,72,73,74,83,147,148,149,150,151,],[48,-102,-27,-28,-29,-103,114,-35,-36,-37,-38,-39,114,114,-39,114,114,114,]),'DIVIDE':([5,20,41,42,43,66,69,70,71,72,73,74,83,147,148,149,150,151,],[49,-102,-27,-28,-29,-103,115,-35,-36,-37,-38,-39,115,115,-39,115,115,115,]),'MAYOR':([5,20,40,41,42,43,66,74,123,124,125,175,],[-103,-102,62,-27,-28,-29,-103,62,-18,-19,-20,191,]),'MINOR':([5,20,40,41,42,43,66,74,121,122,],[-103,-102,63,-27,-28,-29,-103,63,154,154,]),'NOT':([5,20,40,41,42,43,53,57,59,66,74,89,129,130,131,222,],[-103,-102,64,-27,-28,-29,89,89,89,-103,64,89,89,-66,-67,89,]),'RKEY':([6,7,8,9,10,11,12,13,14,15,16,17,18,20,22,23,24,25,26,27,28,29,30,41,42,43,50,66,67,68,69,70,71,72,73,74,90,92,94,105,106,116,117,118,119,128,141,142,147,148,149,150,151,174,176,178,180,182,183,185,186,194,195,197,198,202,203,204,209,210,213,217,220,221,224,228,],[-88,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-102,-90,-91,-92,-93,-94,-50,-51,-52,-53,-27,-28,-29,-89,-103,-95,-100,-101,-35,-36,-37,-38,-39,-30,-43,-46,-54,-55,-96,-97,-98,-99,-56,-48,-49,-31,-39,-32,-33,-34,-15,-47,-24,-42,194,195,197,198,-68,-77,-78,-79,212,-45,-69,218,219,-70,223,-87,224,-72,229,]),'RETURN':([6,7,8,9,10,11,12,13,14,15,16,17,18,20,22,23,24,25,26,27,28,29,30,41,42,43,50,66,67,68,69,70,71,72,73,74,90,92,94,105,106,116,117,118,119,128,141,142,147,148,149,150,151,174,176,178,180,194,195,197,198,201,203,204,208,213,224,],[-88,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-102,-90,-91,-92,-93,-94,-50,-51,-52,-53,-27,-28,-29,-89,-103,-95,-100,-101,-35,-36,-37,-38,-39,-30,-43,-46,-54,-55,-96,-97,-98,-99,-56,-48,-49,-31,-39,-32,-33,-34,-15,-47,-24,-42,-68,-77,-78,-79,211,-45,-69,211,-70,-72,]),'LPAREN':([19,21,34,35,36,37,38,39,44,91,93,95,126,216,],[52,53,57,58,59,60,-16,-17,65,133,134,135,156,222,]),'RPAREN':([20,27,28,29,30,41,42,43,65,66,70,71,72,73,74,82,83,84,85,86,87,88,96,97,98,99,100,102,103,105,106,109,111,123,124,125,132,141,142,147,148,149,150,151,156,157,158,159,160,161,166,169,173,192,193,207,225,],[-102,-50,-51,-52,-53,-27,-28,-29,110,-103,-35,-36,-37,-38,-39,128,-57,-58,-60,-61,-62,-63,136,-59,137,-73,-74,139,140,-54,-55,144,-84,-18,-19,-20,-65,-48,-49,-31,-39,-32,-33,-34,176,177,-64,178,-26,180,-76,-86,-85,-25,203,-75,226,]),'AND':([20,27,28,29,30,41,42,43,66,84,85,86,87,88,97,105,106,132,141,142,158,],[-102,-50,-51,-52,-53,-27,-28,-29,-103,130,-60,-61,-62,-63,130,-54,-55,130,-48,-49,130,]),'OR':([20,27,28,29,30,41,42,43,66,84,85,86,87,88,97,105,106,132,141,142,158,],[-102,-50,-51,-52,-53,-27,-28,-29,-103,131,-60,-61,-62,-63,131,-54,-55,131,-48,-49,131,]),'COMA':([41,42,43,81,111,123,124,125,159,160,161,162,169,192,],[-27,-28,-29,127,146,-18,-19,-20,179,-26,179,181,-86,-25,]),'DOUBLEPOINTS':([51,108,110,144,],[79,143,145,170,]),'TRUE':([53,57,59,89,129,130,131,222,],[87,87,87,87,87,-66,-67,87,]),'FALSE':([53,57,59,89,129,130,131,222,],[88,88,88,88,88,-66,-67,88,]),'LISTOF':([54,138,],[91,166,]),'MUTABLELISTOF':([55,],[93,]),'PAIR':([56,],[95,]),'LIST':([79,],[121,]),'MUTABLELIST':([79,],[122,]),'TINT':([79,143,145,154,170,],[123,123,123,123,123,]),'TFLOAT':([79,143,145,154,170,],[124,124,124,124,124,]),'READLINE':([80,],[126,]),'IN':([101,],[138,]),'LKEY':([123,124,125,136,137,139,140,171,172,187,188,206,214,226,],[-18,-19,-20,163,164,167,168,189,190,199,200,215,215,227,]),'VOID':([145,170,],[172,188,]),'DOT':([165,184,],[184,196,]),'ELSE':([194,205,229,],[206,214,-71,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'documento':([0,],[1,]),'implementa_funcion':([0,],[2,]),'instrucciones':([0,6,163,164,167,168,189,190,199,200,215,227,],[3,50,182,183,185,186,201,202,208,209,221,228,]),'cuerpoF':([0,6,163,164,167,168,189,190,199,200,215,227,],[6,6,6,6,6,6,6,6,6,6,6,6,]),'asignacion':([0,6,163,164,167,168,189,190,199,200,215,227,],[7,7,7,7,7,7,7,7,7,7,7,7,]),'impresion':([0,6,163,164,167,168,189,190,199,200,215,227,],[8,8,8,8,8,8,8,8,8,8,8,8,]),'asignadores':([0,6,163,164,167,168,189,190,199,200,215,227,],[9,9,9,9,9,9,9,9,9,9,9,9,]),'comparators':([0,6,45,53,57,59,75,76,77,78,89,129,163,164,167,168,189,190,199,200,211,215,222,227,],[10,10,68,85,85,85,68,68,68,68,85,85,10,10,10,10,10,10,10,10,68,10,85,10,]),'list':([0,6,163,164,167,168,189,190,199,200,215,227,],[11,11,11,11,11,11,11,11,11,11,11,11,]),'mutableList':([0,6,163,164,167,168,189,190,199,200,215,227,],[12,12,12,12,12,12,12,12,12,12,12,12,]),'pair':([0,6,163,164,167,168,189,190,199,200,215,227,],[13,13,13,13,13,13,13,13,13,13,13,13,]),'inData':([0,6,163,164,167,168,189,190,199,200,215,227,],[14,14,14,14,14,14,14,14,14,14,14,14,]),'if':([0,6,163,164,167,168,189,190,199,200,215,227,],[15,15,15,15,15,15,15,15,15,15,15,15,]),'for':([0,6,163,164,167,168,189,190,199,200,215,227,],[16,16,16,16,16,16,16,16,16,16,16,16,]),'while':([0,6,163,164,167,168,189,190,199,200,215,227,],[17,17,17,17,17,17,17,17,17,17,17,17,]),'when':([0,6,163,164,167,168,189,190,199,200,215,227,],[18,18,18,18,18,18,18,18,18,18,18,18,]),'designacion':([0,6,163,164,167,168,189,190,199,200,215,227,],[19,19,19,19,19,19,19,19,19,19,19,19,]),'valor':([0,6,45,53,57,59,62,63,75,76,77,78,89,104,107,112,113,114,115,129,133,134,135,152,163,164,167,168,179,181,189,190,199,200,211,215,222,227,],[20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,160,160,162,174,20,20,20,20,192,193,20,20,20,20,20,20,20,20,]),'asigna':([0,6,163,164,167,168,189,190,199,200,215,227,],[22,22,22,22,22,22,22,22,22,22,22,22,]),'plusasigna':([0,6,163,164,167,168,189,190,199,200,215,227,],[23,23,23,23,23,23,23,23,23,23,23,23,]),'minasigna':([0,6,163,164,167,168,189,190,199,200,215,227,],[24,24,24,24,24,24,24,24,24,24,24,24,]),'multasigna':([0,6,163,164,167,168,189,190,199,200,215,227,],[25,25,25,25,25,25,25,25,25,25,25,25,]),'divasigna':([0,6,163,164,167,168,189,190,199,200,215,227,],[26,26,26,26,26,26,26,26,26,26,26,26,]),'compareType':([0,6,45,53,57,59,75,76,77,78,89,129,163,164,167,168,189,190,199,200,211,215,222,227,],[27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,]),'compareGreaterthan':([0,6,45,53,57,59,75,76,77,78,89,129,163,164,167,168,189,190,199,200,211,215,222,227,],[28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,]),'compareSmallerthan':([0,6,45,53,57,59,75,76,77,78,89,129,163,164,167,168,189,190,199,200,211,215,222,227,],[29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,]),'compareNotEqual':([0,6,45,53,57,59,75,76,77,78,89,129,163,164,167,168,189,190,199,200,211,215,222,227,],[30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,]),'listAsignacion':([0,6,163,164,167,168,189,190,199,200,215,227,],[31,31,31,31,31,31,31,31,31,31,31,31,]),'mutListAsignacion':([0,6,163,164,167,168,189,190,199,200,215,227,],[32,32,32,32,32,32,32,32,32,32,32,32,]),'pairAsignation':([0,6,163,164,167,168,189,190,199,200,215,227,],[33,33,33,33,33,33,33,33,33,33,33,33,]),'dato':([0,6,45,53,57,59,62,63,75,76,77,78,89,104,107,112,113,114,115,129,163,164,167,168,189,190,199,200,211,215,222,227,],[40,40,74,74,40,40,105,106,74,74,74,74,40,141,142,148,148,148,148,40,40,40,40,40,40,40,40,40,74,40,40,40,]),'asignado':([45,75,76,77,78,211,],[67,116,117,118,119,220,]),'operado':([45,53,75,76,77,78,112,113,114,115,211,],[69,83,69,69,69,69,147,149,150,151,69,]),'add':([45,53,75,76,77,78,112,113,114,115,211,],[70,70,70,70,70,70,70,70,70,70,70,]),'subtract':([45,53,75,76,77,78,112,113,114,115,211,],[71,71,71,71,71,71,71,71,71,71,71,]),'multiply':([45,53,75,76,77,78,112,113,114,115,211,],[72,72,72,72,72,72,72,72,72,72,72,]),'divide':([45,53,75,76,77,78,112,113,114,115,211,],[73,73,73,73,73,73,73,73,73,73,73,]),'datoretornado':([53,],[82,]),'booly':([53,57,59,89,129,222,],[84,97,97,132,158,97,]),'logic':([53,57,59,89,129,222,],[86,86,86,86,86,86,]),'listOf':([54,],[90,]),'mutableListOf':([55,],[92,]),'pairBody':([56,],[94,]),'condicion':([57,59,222,],[96,102,225,]),'condicionFor':([58,],[98,]),'condicionRango':([58,],[99,]),'condicionBloque':([58,],[100,]),'listaparametros':([65,146,],[109,173,]),'parametro':([65,146,],[111,111,]),'tipo':([79,143,145,154,170,],[120,169,171,175,187,]),'logicoperador':([84,97,132,158,],[129,129,129,129,]),'diamondType':([121,122,],[153,155,]),'elementos':([133,134,],[159,161,]),'else':([194,205,],[204,213,]),'elseif':([194,],[205,]),'retorno':([201,208,],[210,217,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> documento","S'",1,None,None,None),
  ('documento -> implementa_funcion','documento',1,'p_documento','sintactic.py',5),
  ('documento -> instrucciones','documento',1,'p_documento','sintactic.py',6),
  ('cuerpoF -> asignacion','cuerpoF',1,'p_cuerpoF','sintactic.py',9),
  ('cuerpoF -> impresion','cuerpoF',1,'p_cuerpoF','sintactic.py',10),
  ('cuerpoF -> asignadores','cuerpoF',1,'p_cuerpoF','sintactic.py',11),
  ('cuerpoF -> comparators','cuerpoF',1,'p_cuerpoF','sintactic.py',12),
  ('cuerpoF -> list','cuerpoF',1,'p_cuerpoF','sintactic.py',13),
  ('cuerpoF -> mutableList','cuerpoF',1,'p_cuerpoF','sintactic.py',14),
  ('cuerpoF -> pair','cuerpoF',1,'p_cuerpoF','sintactic.py',15),
  ('cuerpoF -> inData','cuerpoF',1,'p_cuerpoF','sintactic.py',16),
  ('cuerpoF -> if','cuerpoF',1,'p_cuerpoF','sintactic.py',17),
  ('cuerpoF -> for','cuerpoF',1,'p_cuerpoF','sintactic.py',18),
  ('cuerpoF -> while','cuerpoF',1,'p_cuerpoF','sintactic.py',19),
  ('cuerpoF -> when','cuerpoF',1,'p_cuerpoF','sintactic.py',20),
  ('asignacion -> designacion VARIABLE DOUBLEPOINTS tipo IGUAL valor','asignacion',6,'p_asignacion','sintactic.py',24),
  ('designacion -> VAL','designacion',1,'p_designacion','sintactic.py',28),
  ('designacion -> VAR','designacion',1,'p_designacion','sintactic.py',29),
  ('tipo -> TINT','tipo',1,'p_tipo','sintactic.py',35),
  ('tipo -> TFLOAT','tipo',1,'p_tipo','sintactic.py',36),
  ('tipo -> STRING','tipo',1,'p_tipo','sintactic.py',37),
  ('diamondType -> MINOR tipo MAYOR','diamondType',3,'p_diamondtype','sintactic.py',43),
  ('listAsignacion -> designacion VARIABLE DOUBLEPOINTS LIST diamondType','listAsignacion',5,'p_listAsignacion','sintactic.py',47),
  ('listAsignacion -> designacion VARIABLE','listAsignacion',2,'p_listAsignacion','sintactic.py',48),
  ('listOf -> LISTOF LPAREN elementos RPAREN','listOf',4,'p_listOf','sintactic.py',54),
  ('elementos -> elementos COMA valor','elementos',3,'p_elementos','sintactic.py',59),
  ('elementos -> valor','elementos',1,'p_elementos','sintactic.py',60),
  ('valor -> VINT','valor',1,'p_valor','sintactic.py',66),
  ('valor -> VFLOAT','valor',1,'p_valor','sintactic.py',67),
  ('valor -> STRING','valor',1,'p_valor','sintactic.py',68),
  ('list -> listAsignacion IGUAL listOf','list',3,'p_list','sintactic.py',74),
  ('add -> operado PLUS operado','add',3,'p_add','sintactic.py',79),
  ('subtract -> operado MINUS operado','subtract',3,'p_subtract','sintactic.py',83),
  ('multiply -> operado TIMES operado','multiply',3,'p_multiply','sintactic.py',87),
  ('divide -> operado DIVIDE operado','divide',3,'p_divide','sintactic.py',91),
  ('operado -> add','operado',1,'p_operado','sintactic.py',95),
  ('operado -> subtract','operado',1,'p_operado','sintactic.py',96),
  ('operado -> multiply','operado',1,'p_operado','sintactic.py',97),
  ('operado -> divide','operado',1,'p_operado','sintactic.py',98),
  ('operado -> dato','operado',1,'p_operado','sintactic.py',99),
  ('mutListAsignacion -> designacion VARIABLE DOUBLEPOINTS MUTABLELIST diamondType','mutListAsignacion',5,'p_mutListAsignacion','sintactic.py',104),
  ('mutListAsignacion -> designacion VARIABLE','mutListAsignacion',2,'p_mutListAsignacion','sintactic.py',105),
  ('mutableListOf -> MUTABLELISTOF LPAREN elementos RPAREN','mutableListOf',4,'p_mutableListOf','sintactic.py',111),
  ('mutableList -> mutListAsignacion IGUAL mutableListOf','mutableList',3,'p_mutableList','sintactic.py',116),
  ('pairAsignation -> designacion LPAREN VARIABLE COMA VARIABLE RPAREN','pairAsignation',6,'p_pairAsignation','sintactic.py',122),
  ('pairBody -> PAIR LPAREN valor COMA valor RPAREN','pairBody',6,'p_pairBody','sintactic.py',127),
  ('pair -> pairAsignation IGUAL pairBody','pair',3,'p_pair','sintactic.py',132),
  ('inData -> designacion VARIABLE IGUAL READLINE LPAREN RPAREN','inData',6,'p_inData','sintactic.py',137),
  ('compareType -> dato IGUAL IGUAL dato','compareType',4,'p_compareType','sintactic.py',141),
  ('compareNotEqual -> dato NOT IGUAL dato','compareNotEqual',4,'p_compareNotEqual','sintactic.py',145),
  ('comparators -> compareType','comparators',1,'p_comparators','sintactic.py',149),
  ('comparators -> compareGreaterthan','comparators',1,'p_comparators','sintactic.py',150),
  ('comparators -> compareSmallerthan','comparators',1,'p_comparators','sintactic.py',151),
  ('comparators -> compareNotEqual','comparators',1,'p_comparators','sintactic.py',152),
  ('compareGreaterthan -> dato MAYOR dato','compareGreaterthan',3,'p_compareGreaterthan','sintactic.py',156),
  ('compareSmallerthan -> dato MINOR dato','compareSmallerthan',3,'p_compareSmallerthan','sintactic.py',160),
  ('impresion -> PRINTLN LPAREN datoretornado RPAREN','impresion',4,'p_impresion','sintactic.py',164),
  ('datoretornado -> operado','datoretornado',1,'p_datoretornado','sintactic.py',167),
  ('datoretornado -> booly','datoretornado',1,'p_datoretornado','sintactic.py',168),
  ('condicion -> booly','condicion',1,'p_condicion','sintactic.py',171),
  ('booly -> comparators','booly',1,'p_booly','sintactic.py',175),
  ('booly -> logic','booly',1,'p_booly','sintactic.py',176),
  ('booly -> TRUE','booly',1,'p_booly','sintactic.py',177),
  ('booly -> FALSE','booly',1,'p_booly','sintactic.py',178),
  ('logic -> booly logicoperador booly','logic',3,'p_logic','sintactic.py',181),
  ('logic -> NOT booly','logic',2,'p_logic','sintactic.py',182),
  ('logicoperador -> AND','logicoperador',1,'p_logicoperador','sintactic.py',186),
  ('logicoperador -> OR','logicoperador',1,'p_logicoperador','sintactic.py',187),
  ('if -> IF LPAREN condicion RPAREN LKEY instrucciones RKEY','if',7,'p_if','sintactic.py',191),
  ('if -> IF LPAREN condicion RPAREN LKEY instrucciones RKEY else','if',8,'p_if','sintactic.py',192),
  ('if -> IF LPAREN condicion RPAREN LKEY instrucciones RKEY elseif else','if',9,'p_if','sintactic.py',193),
  ('elseif -> ELSE IF LPAREN condicion RPAREN LKEY instrucciones RKEY','elseif',8,'p_elseif','sintactic.py',197),
  ('else -> ELSE LKEY instrucciones RKEY','else',4,'p_else','sintactic.py',200),
  ('condicionFor -> condicionRango','condicionFor',1,'p_condicionFor','sintactic.py',203),
  ('condicionFor -> condicionBloque','condicionFor',1,'p_condicionFor','sintactic.py',204),
  ('condicionRango -> VARIABLE IN VINT DOT DOT VINT','condicionRango',6,'p_condicionRango','sintactic.py',208),
  ('condicionBloque -> VARIABLE IN LISTOF','condicionBloque',3,'p_condicionBloque','sintactic.py',211),
  ('for -> FOR LPAREN condicionFor RPAREN LKEY instrucciones RKEY','for',7,'p_for','sintactic.py',215),
  ('while -> WHILE LPAREN condicion RPAREN LKEY instrucciones RKEY','while',7,'p_while','sintactic.py',219),
  ('when -> WHEN LPAREN VARIABLE RPAREN LKEY instrucciones RKEY','when',7,'p_when','sintactic.py',223),
  ('implementa_funcion -> FUN VARIABLE LPAREN listaparametros RPAREN DOUBLEPOINTS tipo LKEY instrucciones retorno RKEY','implementa_funcion',11,'p_implementa_funcion','sintactic.py',226),
  ('implementa_funcion -> FUN VARIABLE LPAREN RPAREN DOUBLEPOINTS tipo LKEY instrucciones retorno RKEY','implementa_funcion',10,'p_implementa_funcion','sintactic.py',227),
  ('implementa_funcion -> FUN VARIABLE LPAREN RPAREN DOUBLEPOINTS VOID LKEY instrucciones RKEY','implementa_funcion',9,'p_implementa_funcion','sintactic.py',228),
  ('implementa_funcion -> FUN VARIABLE LPAREN listaparametros RPAREN DOUBLEPOINTS VOID LKEY instrucciones RKEY','implementa_funcion',10,'p_implementa_funcion','sintactic.py',229),
  ('listaparametros -> parametro','listaparametros',1,'p_listaparametros','sintactic.py',233),
  ('listaparametros -> parametro COMA listaparametros','listaparametros',3,'p_listaparametros','sintactic.py',234),
  ('parametro -> VARIABLE DOUBLEPOINTS tipo','parametro',3,'p_parametro','sintactic.py',237),
  ('retorno -> RETURN asignado','retorno',2,'p_retorno','sintactic.py',240),
  ('instrucciones -> cuerpoF','instrucciones',1,'p_instrucciones','sintactic.py',243),
  ('instrucciones -> cuerpoF instrucciones','instrucciones',2,'p_instrucciones','sintactic.py',244),
  ('asignadores -> asigna','asignadores',1,'p_asignadores','sintactic.py',247),
  ('asignadores -> plusasigna','asignadores',1,'p_asignadores','sintactic.py',248),
  ('asignadores -> minasigna','asignadores',1,'p_asignadores','sintactic.py',249),
  ('asignadores -> multasigna','asignadores',1,'p_asignadores','sintactic.py',250),
  ('asignadores -> divasigna','asignadores',1,'p_asignadores','sintactic.py',251),
  ('asigna -> VARIABLE IGUAL asignado','asigna',3,'p_asigna','sintactic.py',254),
  ('plusasigna -> VARIABLE PLUS IGUAL asignado','plusasigna',4,'p_plusasigna','sintactic.py',257),
  ('minasigna -> VARIABLE MINUS IGUAL asignado','minasigna',4,'p_minasigna','sintactic.py',260),
  ('multasigna -> VARIABLE TIMES IGUAL asignado','multasigna',4,'p_multasigna','sintactic.py',263),
  ('divasigna -> VARIABLE DIVIDE IGUAL asignado','divasigna',4,'p_divasigna','sintactic.py',266),
  ('asignado -> comparators','asignado',1,'p_asignado','sintactic.py',269),
  ('asignado -> operado','asignado',1,'p_asignado','sintactic.py',270),
  ('dato -> valor','dato',1,'p_dato','sintactic.py',273),
  ('dato -> VARIABLE','dato',1,'p_dato','sintactic.py',274),
]
